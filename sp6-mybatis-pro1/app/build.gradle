/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'war'  // war 배포
    id "org.gretty" version "4.1.0" // https://plugins.gradle.org/search?term=tomcat tomcat을 위한 여려가지 플러그인
    // id "com.bmuschko.tomcat" version "2.7.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    
    // 여기서부터 내가 추가한 모듈
    // ======================================================================================= START
    // spring-context
    implementation 'org.springframework:spring-context:6.1.6'
    // spring-web
    implementation 'org.springframework:spring-web:6.1.6'
    // spring-webmvc
    implementation 'org.springframework:spring-webmvc:6.1.6'
    // spring-test
    testImplementation 'org.springframework:spring-test:6.1.6'
    // HikariCP
    implementation 'com.zaxxer:HikariCP:5.1.0'
    // mybatis
    implementation 'org.mybatis:mybatis:3.5.16'
    // mybatis-spring
    implementation 'org.mybatis:mybatis-spring:3.0.3'
    // spring-jdbc
    implementation 'org.springframework:spring-jdbc:6.1.6'
    // spring-tx
    implementation 'org.springframework:spring-tx:6.1.6'
    // mariadb-java-client
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'

    // jakarta.servlet-api
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0' // 버전 확인 => https://tomcat.apache.org/whichversion.html
    // jakarta.servlet.jsp.jstl-api
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0' // 버전 확인 => https://tomcat.apache.org/whichversion.html
    // jakarta.servlet.jsp-api
    compileOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1'
    // glassfish-jstl
    implementation 'org.eclipse.jetty:glassfish-jstl:11.0.21'

    // log4j-core (쿼리 로그 출력)
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    // log4j-api
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    // log4jdbc-log4j2-jdbc4.1
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    // jackson-databind (ResponseEntity 사용시 필요)
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    // javax.servlet-api
    // compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    // javax.servlet.jsp-api
    // compileOnly 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3'
    // jstl
    // implementation 'javax.servlet:jstl:1.2'

    
    // 임베디드 톰캣 사용
    // tomcat-embed-core
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.19'
    // tomcat-embed-jasper
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.19'
    // tomcat-embed-logging-juli
    implementation 'org.apache.tomcat.embed:tomcat-embed-logging-juli:9.0.0.M6'

    gretty 'org.apache.tomcat:tomcat-dbcp:10.1.19'
    // ======================================================================================= END
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.sp6mybatis.pro1.App'
}

// https://gretty-gradle-plugin.github.io/gretty-doc/Gretty-configuration.html 
// 위 문서를 기반으로 작성
gretty {
    servletContainer = 'tomcat10' // gretty 버전과 톰캣 버전 호환성 확인
    // httpPort = 8080
    contextPath = "${rootProject.name}" // 기본값은 "/${project.name}"
    enableNaming = true
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}
